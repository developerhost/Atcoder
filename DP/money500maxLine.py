# ナップザック問題を動的計画法で解く
# 500円以内で一番長く棒を買うと総長は何センチか？

# 価格と長さのリスト
N = 5
length = 10
lines = [4, 7, 8, 5, 1]

money = 500
price = [100, 200, 250, 200, 50]

# moneyを50円刻みのリストに変換
money = money // 50
price = list(map(lambda x: x // 50, price))
print(price, money) # [2, 4, 5, 4, 1] 10

# dp表を作成
dp = [[0 for i in range(money+1)] for j in range(N+1)]

# 初期条件 最初の行を0にする
for i in range(money+1):
    dp[0][i] = 0

# for i in dp:
#     print(i)
# print("--------------------")
# x軸がお金、y軸が線の本数
# header = 0 50 100 150 200 250 300 350 400 450 500
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# 順番に線を見てPriceを埋めていく
for i in range(N): # 0, 1, 2, 3, 4 ここは線の本数
    for j in range(money+1): # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ここは長さcm
        if price[i] <= j: # price[i]は線の価格、jは合計金額 例えばprice[i]が2でjが5なら、5円で2円の線を買えるかどうか
            dp[i+1][j] = max(dp[i][j-price[i]] + lines[i], dp[i][j]) # dp[i][j-price[i]]は線を買った時の長さ、dp[i][j]は線を買わなかった時の長さ maxで金額が大きい方を選ぶ
        else: # 金額が足りない場合は線を買えないので、買わなかった時の長さをそのまま入れる
            dp[i+1][j] = dp[i][j]

for i in dp:
    print(i)
print("--------------------")
# [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
# [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4]
# [0, 0, 4, 4, 7, 7, 11, 11, 11, 11, 11]
# [0, 0, 4, 4, 7, 8, 11, 12, 12, 15, 15]
# [0, 0, 4, 4, 7, 8, 11, 12, 12, 15, 16]
# [0, 1, 4, 5, 7, 8, 11, 12, 13, 15, 16]

# ここまででdp表が完成したので、最後の行の最大値を出力する
print(dp[N][money]) # 13