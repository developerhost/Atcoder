# ナップザック問題をDPを使って解く

# 品物の数
N = 6
# ナップザックの容量
W = 15

# 品物の重さと価値
weight = [2, 1, 3, 2, 1, 5]
value = [3, 2, 6, 1, 3, 85]

# dp表を作成する (N+1行 W+1列)
dp = [[0 for i in range(W+1)] for j in range(N+1)]

# dp表を埋めていく(iは品物の数、jはナップザックの容量) 0行目と0列目は0で埋めているので1から始める
for i in range(1, N+1):
    for j in range(1, W+1):
        if j - weight[i-1] >= 0: # 重さがナップザックの容量を超えない場合
            dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i-1]] + value[i-1]) # j-weight[i-1]は品物iを入れたときの重さ value[i-1]は品物iを入れたときの価値
        else: # 重さがナップザックの容量を超える場合
            dp[i][j] = dp[i-1][j] # 以前の最大値をそのまま入れる

# dp表を表示する
for i in dp:
    print(i)

'''
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
[0, 2, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]
[0, 2, 3, 6, 8, 9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11]
[0, 2, 3, 6, 8, 9, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12]
[0, 3, 5, 6, 9, 11, 12, 14, 14, 15, 15, 15, 15, 15, 15, 15]
[0, 3, 5, 6, 9, 85, 88, 90, 91, 94, 96, 97, 99, 99, 100, 100]
'''

# dp表から答えを求める
print(dp[N][W]) # 100