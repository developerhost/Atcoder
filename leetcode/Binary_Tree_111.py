from typing import Optional

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def minDepth(self, root: Optional[TreeNode]) -> int:
        # ベースケース...
        # サブツリーが空の場合、つまり根がNULLの場合、深さを0として返す...
        if root is None:  return 0
        # 2つのサブツリーの深さを初期化する...
        leftDepth = self.minDepth(root.left)
        rightDepth = self.minDepth(root.right)
        # 両方のサブツリーが空の場合...
        if root.left is None and root.right is None:
            return 1
        # 左のサブツリーが空の場合、右のサブツリーの深さに1を加えて返す...
        if root.left is None:
            return 1 + rightDepth
        # 右のサブツリーが空の場合、左のサブツリーの深さに1を加えて返す...
        if root.right is None:
            return 1 + leftDepth
        # 2つの子の関数が深さを返した場合...
        # これらの2つのサブツリーのうち最小のものを選び、それに1を加えた値を返す...
        return min(leftDepth, rightDepth) + 1  # 1を加えるのは、現在のノードが2つのサブツリーの親であるためです...
